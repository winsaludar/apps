@page "/reset-password"
@layout Layout.AuthLayout
@inject IAuthenticationHttpClient HttpClient

<article class="lg:w-1/2 xl:w-5/12 p-6 sm:p-12">
    <section class="mt-12 flex flex-col items-center">

        <AlertBox HasClientResponse="@hasClientResponse" HasError="@hasError" Messages="@messages" />

        <h1 class="text-2xl xl:text-3xl font-extrabold text-center">
            Reset your password
        </h1>

        <EditForm class="w-full mx-auto mt-12" Model="resetModel" OnValidSubmit="HandleSubmitAsync" FormName="resetPasswordForm">
            <InputText class="w-full px-8 py-4 -lg font-medium border bg-gray-100 border-gray-200 placeholder-gray-500 text-sm focus:outline-none focus:border-gray-400 focus:bg-gray-100 cursor-default"
            type="email"
            placeholder="Email"
            readOnly
            required
            @bind-Value="@Email" />
            <InputText class="w-full px-8 py-4 rounded-lg font-medium border border-gray-200 placeholder-gray-500 text-sm focus:outline-none focus:border-gray-400 focus:bg-white mt-5"
            type="password"
            placeholder="Password"
            required
            @bind-Value="@resetModel.Password" />
            <InputText class="w-full px-8 py-4 rounded-lg font-medium border border-gray-200 placeholder-gray-500 text-sm focus:outline-none focus:border-gray-400 focus:bg-white mt-5"
            type="password"
            placeholder="Repeat Password"
            required
            @bind-Value="@resetModel.RetypePassword" />
            <button class="mt-5 tracking-wide font-semibold bg-orange-500 text-gray-100 w-full py-4 rounded-lg hover:bg-orange-700 transition-all duration-300 ease-in-out flex items-center justify-center focus:shadow-outline focus:outline-none"
            type="submit">
                @if (isLoading)
                {
                    <LoaderIcon />
                }
                else
                {
                    <svg class="w-6 h-6 -ml-2"
                    fill="none"
                    stroke="currentColor"
                    strokeWidth="2"
                    strokeLinecap="round"
                    strokeLinejoin="round">
                        <path d="M16 21v-2a4 4 0 00-4-4H5a4 4 0 00-4 4v2" />
                        <circle cx="8.5" cy="7" r="4" />
                        <path d="M20 8v6M23 11h-6" />
                    </svg>
                }
                <span class="ml-3">@(isLoading ? "Resetting..." : "Reset")</span>
            </button>
        </EditForm>

        <div class="my-12 text-sm text-center">
            <p class="text-gray-600">
                <NavLink href="/register" class="inline-block px-4 py-2 form-semibold hover:text-orange-500 transition-all duration-300 ease-in-out focus:shadow-outline focus:outline-none">
                    No account yet? Register now
                </NavLink>
            </p>
            <p class="text-gray-600">
                <NavLink href="/login" class="inline-block px-4 py-2 form-semibold hover:text-orange-500 transition-all duration-300 ease-in-out focus:shadow-outline focus:outline-none">
                    Done changing your password? Login here
                </NavLink>
            </p>
        </div>
    </section>
</article>

<Sidebar BackgroundImage="/placeholder/reset-placeholder.jpg" />

@code {
    private ResetPasswordModel resetModel = new();
    private bool hasClientResponse = false;
    private bool hasError = false;
    private IEnumerable<string> messages = new List<string>();
    private bool isLoading = false;

    [SupplyParameterFromQuery]
    [Parameter]
    public string Email { get; set; } = default!;

    [SupplyParameterFromQuery()]
    [Parameter]
    public string Token { get; set; } = default!;

    public async Task HandleSubmitAsync()
    {
        ResetUI();
        isLoading = true;

        ClientResponse response = await HttpClient.ResetPasswordAsync(Email, resetModel.Password, resetModel.RetypePassword, Token);
        if (!response.IsSuccessful)
        {
            hasClientResponse = true;
            hasError = true;
            messages = response.Errors;

        }
        else
        {
            hasClientResponse = true;
            hasError = false;
            messages = ["Reset password successful! You may now login using your new password"];
            resetModel = new();
        }

        isLoading = false;
    }

    private void ResetUI()
    {
        hasClientResponse = false;
        hasError = false;
        messages = [];
    }

    public class ResetPasswordModel
    {
        public string Password { get; set; } = default!;
        public string RetypePassword { get; set; } = default!;
    }
}
